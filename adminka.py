import telebot
from telebot import types
#from My.Bot_Token import token
from DBfunctions import DB

bot = telebot.TeleBot('7073410632:AAGKQTCNrJvlJxZIHJHlr6k08TEt5sDRW0c')

admins = {}


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ U Mirika!", reply_markup=markup)


@bot.message_handler(commands=['add_admin'])
def add_admin(message):

    try:
        _, user_id, username = message.text.split()
        #admins[int(user_id)] = username
        is_admin = 1
        db.insert('Users', [tg_chat_id, name, tel, email, adress, is_admin])
        bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_admin user_id username")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['change_admin'])
def change_admin(message):
    try:
        _, user_id, new_username = message.text.split()
        user_id = int(user_id)
        admin_data = db.get_client_data(user_id)
        if db.is_registered(user_id):
            old_username = db.get_client_data(user_id)[2]
            db.update('Users', 'name', new_username, user_id)
            bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {old_username} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_username}.")
        else:
            bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /change_admin user_id new_username")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['get_user_id'])
def get_user_id(message):
    try:
        _, username = message.text.split()
        chat_id = message.chat.id
        user = db.get_user_id_by_name(username)
        if user:
            user_id = user[0]
            bot.send_message(chat_id, f"User ID for {username} is {user_id}")
        else:
            bot.send_message(chat_id, f"User {username} not found")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /get_user_id username")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

def get_admins(chat_id):
    admins = db.get_admins()
    if admins:
        admin_list = [f"{admin[0]}: {admin[1]}" for admin in admins]
        admin_message = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:\n" + "\n".join(admin_list)
    else:
        admin_message = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç."
    bot.send_message(chat_id, admin_message)


# @bot.message_handler(content_types=['text'])
# def get_text_messages(message):
#     if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         btn1 = types.KeyboardButton('–°—É–ø–µ—Ä –ê–¥–º–∏–Ω')
#         btn2 = types.KeyboardButton('–ë–ª—é–¥–∞')
#         btn3 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ')
#         btn4 = types.KeyboardButton('–ó–∞–∫–∞–∑—ã')
#         btn5 = types.KeyboardButton('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')
#         btn6 = types.KeyboardButton('–ü–æ–º–æ—â—å')
#
#         markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
#         bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', reply_markup=markup)
#     elif message.text == '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω':
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         btn7 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
#         btn8 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å')
#         markup.add(btn7, btn8)
#         bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, –°—É–ø–µ—Ä –ê–¥–º–∏–Ω, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å', reply_markup=markup)
#         get_admins(message.chat.id)
#     elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞':
#         bot.send_message(message.chat.id,
#                          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_admin user_id username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
#     elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å':
#         bot.send_message(message.chat.id,
#                          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /change_admin user_id new_username –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')


@bot.message_handler(commands=['add_dish'])
def add_dish(message):
    dish_data[message.chat.id] = {}
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:')
    bot.register_next_step_handler(message, get_dish_name)

def get_dish_name(message):
    dish_data[message.chat.id]['name'] = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:')
    bot.register_next_step_handler(message, get_dish_category)

def get_dish_category(message):
    dish_data[message.chat.id]['category'] = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞:')
    bot.register_next_step_handler(message, get_dish_price)

def get_dish_price(message):
    try:
        dish_data[message.chat.id]['price'] = float(message.text)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –±–ª—é–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS):')
        bot.register_next_step_handler(message, get_dish_cooking_time)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
        bot.register_next_step_handler(message, get_dish_price)

def get_dish_cooking_time(message):
    try:
        dish_data[message.chat.id]['cooking_time'] = message.text
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞:')
        bot.register_next_step_handler(message, get_dish_img)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
        bot.register_next_step_handler(message, get_dish_cooking_time)

def get_dish_img(message):
    dish_data[message.chat.id]['img'] = message.text
    dish_data[message.chat.id]['is_on_stop'] = 0
    db.insert('Dishes', [
        dish_data[message.chat.id]['name'],
        dish_data[message.chat.id]['category'],
        dish_data[message.chat.id]['price'],
        dish_data[message.chat.id]['cooking_time'],
        dish_data[message.chat.id]['img'],
        dish_data[message.chat.id]['is_on_stop']
    ])
    bot.send_message(message.chat.id, f"–ë–ª—é–¥–æ '{dish_data[message.chat.id]['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    dish_data.pop(message.chat.id)

def get_dishes(chat_id):
    dishes = db.select('Dishes')
    if dishes:
        dish_list = "\n".join([f"{dish[1]} - {dish[2]}" for dish in dishes])
        bot.send_message(chat_id, f"–°–ø–∏—Å–æ–∫ –±–ª—é–¥:\n{dish_list}")
    else:
        bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ –±–ª—é–¥ –ø—É—Å—Ç.")


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–°—É–ø–µ—Ä –ê–¥–º–∏–Ω')
        btn2 = types.KeyboardButton('–ë–ª—é–¥–∞')
        btn3 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ')
        btn4 = types.KeyboardButton('–ó–∞–∫–∞–∑—ã')
        btn5 = types.KeyboardButton('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')
        btn6 = types.KeyboardButton('–ü–æ–º–æ—â—å')

        markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    elif message.text == '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn7 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        btn8 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å')
        markup.add(btn7, btn8)
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, –°—É–ø–µ—Ä –ê–¥–º–∏–Ω, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å', reply_markup=markup)
        get_admins(message.chat.id)
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞':
        bot.send_message(message.chat.id,
                         '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_admin tg_chat_id name tel email adress –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å':
        bot.send_message(message.chat.id,
                         '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /change_admin user_id new_username –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ':
        add_dish(message)
    elif message.text == '–ë–ª—é–¥–∞':
        get_dishes(message.chat.id)

# def dish_category(message):
#     category = message.text
#     if category in ['–°–∞–ª–∞—Ç—ã', '–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞', '–ì–æ—Ä—è—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞', '–ó–∞–∫—É—Å–∫–∏']:
#         bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: ")
#         bot.register_next_step_handler(message, save_dish)
#     else:
#         bot.send_message('–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')

        # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # bot.send_message(message.from_user.id, )



if __name__ == "__main__":
    print('Ready')
    bot.infinity_polling(none_stop=True)