import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from My import BotToken
from DBfunctions import db
from Sheduler import schedule_message, start_scheduler_thread
import logging
import time
import threading
from Order import user_order_dict

logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot(BotToken.token)

markupH = types.InlineKeyboardMarkup()
button_1 = types.InlineKeyboardButton('Help', callback_data='help')
button_2 = types.InlineKeyboardButton('–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', callback_data='order')
button_3 = types.InlineKeyboardButton('–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å?', callback_data='time')
markupH.add(button_1)
markupH.add(button_2)
markupH.add(button_3)

# my_dict_orders = {"user_tg_chat_id": [(1, '–ü–∏—Ü—Ü–∞', 1, 20), (2, '–û–º–ª–µ—Ç', 1, 17), (3, '–§–æ-–±–æ', 1, 33), ]}
"""–∑–∞–ø–æ–ª–Ω–∏—Ç—å —á–µ–º-—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞"""
# user_order_dict = {message.chat.id: [(1, '–ü–∏—Ü—Ü–∞', 1, 20), (), (), ]}

# –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
order_schedule_times = {}
# —Ö—Ä–µ–Ω—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–¥
list_order_for_bd = []

"""–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î –∏ –ø–µ—Ä–µ–≤–æ–¥ –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ [–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞-–¥–∞—Ç–∞](–≤—Ä–æ–¥–µ?).
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î –ø–æ –û–ª—å–≥–∏–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π. –ß—Ç–æ –∂ –∑–∞ –∂–∏–∑–Ω—å, —Ç–æ —Ç–∞–∫–∞—è?"""


# data_history = db.orders_history(message.chat.id)


def history_orders(data):
    list_history_orders = []

    for index, history in enumerate(data):
        """–≤–∑—è—Ç—å –∏–∑ –û–ª–µ–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–±–æ—Ä —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É: –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä - –¥–∞—Ç–∞"""
        res_history = f'{history[0]} - {history[3]}'  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞ –∏ –¥–∞—Ç–æ–π
        list_history_orders.append((res_history, history[0]))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ history[0]
    return list_history_orders


# """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
# # —Å–ø–∏—Å–æ–∫ id –±–ª—é–¥ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏. –ù–∞–≤–µ—Ä–Ω–æ–µ –ø–µ—Ä–µ–¥–∞—Ç—å –û–ª—å–≥–µ –∏ —É –Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫-—Ç–æ —Å–ø–∏—Å–æ–∫?
# # id_dishes_orders = [id_dish[0] for id_dish in my_dict_orders["user_tg_chat_id"]]
# id_dishes_orders = [id_dish[0] for id_dish in user_order_dict[message.chat.id]]
# print(id_dishes_orders)


def get_max_cooking_time(orders):
    max_cooking_time = []

    for id_order in orders:
        dish_data = db.dish_data_on_id(id_order)
        print(dish_data)
        max_cooking_time.append(dish_data[4])
    print(max(max_cooking_time))
    # –∑–∞—Ç–µ–º —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ get_max_cooking_time
    return max(max_cooking_time) if orders else 0


"""–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏, –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤?"""
# data_history = db.orders_history(message.chat.id)
# data_history = db.orders_history('3fdf5g544')  # –¢–µ—Å—Ç
"""—Ç–µ—Å—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤?"""
# data_history = [(1, 1, 1, '20240519 15:40:00', 50, '–≥ –ú–∏–Ω—Å–∫, –ø—Ä –î–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 154'),
#                 (2, 1, 1, '20240519 16:40:00', 50, '–≥ –ú–∏–Ω—Å–∫, –ø—Ä –î–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 84'),
#                 (3, 1, 1, '20240519 17:40:00', 50, '–≥ –ú–∏–Ω—Å–∫, –ø—Ä –î–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 154'),
#                 (4, 1, 1, '20240519 18:40:00', 50, '–≥ –ú–∏–Ω—Å–∫, –ø—Ä –î–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 15'),
#                 (5, 1, 1, '20240519 19:40:00', 50, '–≥ –ú–∏–Ω—Å–∫, –ø—Ä –î–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 54'),
#                 (6, 1, 1, '20240519 20:40:00', 50, '–≥ –ú–∏–Ω—Å–∫, –ø—Ä –î–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 14')]  # –¢–µ—Å—Ç
#
# print(history_orders(data_history))

"""–§—É–Ω–∫—Ü–∏—è `generate_markup(page)` —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""


# def generate_markup(page):
def generate_markup(page, data_history):
    markup = InlineKeyboardMarkup(row_width=1)
    start_index = page * 2  # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    end_index = start_index + 2  # –ö–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    for item, order_id in history_orders(data_history)[start_index:end_index]:
        print(item, order_id)
        markup.add(InlineKeyboardButton(item, callback_data="m" + str(order_id)))
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("<<<", callback_data='<' + str(page - 1)))
    if end_index < len(history_orders(data_history)):
        nav_buttons.append(InlineKeyboardButton(">>>", callback_data='>' + str(page + 1)))
    markup.row(*nav_buttons)
    return markup


"""–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ history"""


def check_history(message):
    data_history = db.orders_history(message.chat.id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î
    if not data_history:
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        return
    bot.send_message(
        message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
    )
    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∑–∞–∫–∞–∑–æ–≤ ‚¨áÔ∏è:",
        reply_markup=generate_markup(0, data_history)
    )


"""–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ my_orders"""


def check_my_orders(message):
    data_my_order = db.my_orders(message.chat.id)
    if not data_my_order:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    data_my_client = db.get_client_data(message.chat.id)
    # data_dishes_my_order = db.dishes_data(history[0])
    # data_my_order = db.my_orders('nfj4j3nj4')  # –¢–µ—Å—Ç
    # data_my_client = db.get_client_data('nfj4j3nj4')  # –¢–µ—Å—Ç
    # data_dishes_my_order = db.dishes_data(1)  # –¢–µ—Å—Ç
    id_my_order = data_my_order[0][0]  # –î–∞ –ª–∞–¥–Ω–æ, –æ—Ö—Ä–µ–Ω–µ—Ç—å
    print(id_my_order)
    data_dishes_my_order = db.dishes_data(id_my_order)  # –¢–µ—Å—Ç
    print(data_my_order)
    print(data_my_client)

    """–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –ë–ì"""
    # if my_dict_orders["user_tg_chat_id"]:
    # if user_order_dict[message.chat.id]:
    if data_my_order[0][2] == 1:
        bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –≤—Ä–æ–¥–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –•–∑")
        return

    bot.send_message(message.chat.id, "–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ ‚¨áÔ∏è")
    """–≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ?"""
    """–≤–∑—è—Ç—å –∏—Ö –∏–∑ –ë–î? –í—ã–≤–µ–ª–∏"""
    """–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É: –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ—á—Ç–∞, –∞–¥—Ä–µ—Å"""
    # for user in data_my_client:
    data_user = f'{data_my_client[2]}\n{data_my_client[3]}\n{data_my_client[4]}\n{data_my_client[5]}'
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ")
    bot.send_message(message.chat.id, data_user)

    print(data_dishes_my_order)
    """–≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ (—Ç–æ–∂–µ –∏–∑ –±–¥ c 0 –≤ is_delivered –ø–æ id –∫–ª–∞–µ–Ω—Ç–∞)?"""
    """–≤–∑—è—Ç—å –∏—Ö –∏–∑ –æ—Ç–∫—É–¥–∞(–∏–∑ –ë–î –ø–æ def dishes_data(order_id): –Ω–∞–≤–µ—Ä–Ω–æ–µ. –ß–∏—Å—Ç–æ–µ –•–£–¥–æ–∂–µ—Å—Ç–≤–æ)?"""
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏ –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:")
    res_sum = 0
    res_dish_hist = ''
    for dish in data_dishes_my_order:
        print(dish)
        # for dish in data_dishes_my_order:
        res_dish_hist += f'{dish[1]}\n'
        res_sum += dish[2] * dish[3]
    bot.send_message(message.chat.id, res_dish_hist)
    bot.send_message(message.chat.id, (str(res_sum) + " —Ä—É–±."), reply_markup=markupH)


def start(message):
    if message.text == '/my_orders':
        check_my_orders(message)

    if message.text == '/history':
        check_history(message)

    if message.text == '/basket':
        send_basket(message.chat.id)

    elif message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        confirm_order(message)

    """—Ñ—É–Ω–∫—Ü–∏—è send_basket, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""


def send_basket(chat_id):
    # user_order_dict={6142885563:[(2, '–û–º–ª–µ—Ç', 2, 17.0)]}
    # print(user_order_dict)
    if not user_order_dict:
        bot.send_message(chat_id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    if user_order_dict[chat_id]:
        # if my_dict_orders["user_tg_chat_id"]:
        markupB = InlineKeyboardMarkup(row_width=2)
        button_1 = InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='change')
        button_2 = InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue')
        markupB.add(button_1, button_2)

        res_sum_bask = 0
        res_dish_bask = ''
        for dish_bask in user_order_dict[chat_id]:
            print(dish_bask)
            # for dish_bask in my_dict_orders["user_tg_chat_id"]:
            res_dish_bask += f'–ë–ª—é–¥–æ {dish_bask[1]}: —Ü–µ–Ω–∞ {dish_bask[3]} —Ä—É–±. - {dish_bask[2]} —à—Ç. - –∏—Ç–æ–≥–æ {dish_bask[2] * dish_bask[3]} —Ä—É–±.\n'
            res_sum_bask += dish_bask[2] * dish_bask[3]

        bot.send_message(chat_id,
                         f"–°–ø–∏—Å–æ–∫ –±–ª—é–¥ c —Ü–µ–Ω–æ–π –∏ –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ ü•∞:\n{res_dish_bask} –í—Å–µ–≥–æ: {res_sum_bask} —Ä—É–±.",
                         reply_markup=markupB)
    else:
        bot.send_message(chat_id, "Basket –ø—É—Å—Ç–∞—è!", reply_markup=None)


def confirm_order(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
    # —Å–ø–∏—Å–æ–∫ id –±–ª—é–¥ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏. –ù–∞–≤–µ—Ä–Ω–æ–µ –ø–µ—Ä–µ–¥–∞—Ç—å –û–ª—å–≥–µ –∏ —É –Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫-—Ç–æ —Å–ø–∏—Å–æ–∫?
    # id_dishes_orders = [id_dish[0] for id_dish in my_dict_orders["user_tg_chat_id"]]
    id_dishes_orders = [id_dish[0] for id_dish in user_order_dict[message.chat.id]]
    print(id_dishes_orders)
    # max_cooking_time = get_max_cooking_time(user_order_dict[message.chat.id]) ?
    max_cooking_time = get_max_cooking_time(id_dishes_orders)
    print(max_cooking_time)
    # delay = (max_cooking_time + 30) * 60  # –¥–æ–±–∞–≤–ª—è–µ–º 30 –º–∏–Ω—É—Ç –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏
    # print(delay)
    delay = max_cooking_time + 1 * 60  # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª—è–µ–º 1 –º–∏–Ω—É—Ç –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏
    schedule_time = time.time() + delay
    print(schedule_time)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    order_schedule_times[message.chat.id] = schedule_time
    print(order_schedule_times)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    markupPb = types.InlineKeyboardMarkup(row_width=1)
    button_1 = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm')
    button_2 = types.InlineKeyboardButton('–û—Ç—Å–ª–µ–¥–∏—Ç—å –≤—Ä–µ–º—è', callback_data='track_time')
    # markupPb.add(button_1, button_2)
    markupPb.add(button_2)
    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markupPb)

    # –ü–∞—Ä–∞—Ñ–∏–Ω –¥–ª—è –ë–î
    for dish_bask in user_order_dict[message.chat.id]:
        # for dish_bask in my_dict_orders["user_tg_chat_id"]:
        res_order_for_bd = [dish_bask[0], dish_bask[2]]
        list_order_for_bd.append(res_order_for_bd)
    print(list_order_for_bd)
    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Ö—É–π–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î –ø–æ–¥ –≤–∏–¥–æ–º –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ-–º–æ–µ–º—É, –¥–∏—á—å:
    # now_order_for_bd = db.new_order(message.chat.id, schedule_time, list_order_for_bd)
    # print(now_order_for_bd)
    time_for_bd = (time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(schedule_time)))
    print(message.chat.id, time_for_bd)
    # db.new_order('nfj4j3nj4', str(time_for_bd), list_order_for_bd)


    bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ –∞–∫—Ç–∏–≤–µ–Ω —É—à–µ–ª –≤ –ë–î –∏ –ø–æ—à–µ–ª –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è")

    # bot.send_message(message.chat.id, "–ñ–¥–µ–º –∫–∞–∫—É—é-—Ç–æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ú–∏—Ä–æ—Å–ª–∞–≤–∞ –∏ –í–ª–∞–¥–∞")

    # –∑–∞–ø–∏—Å—å –≤ –ë–î –ø–æ–¥ –≤–∏–¥–æ–º –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞. –í—Ä–æ–¥–µ –ø—Ä–æ—Ç–µ—Å—Ç–µ–Ω–æ, –¥–∞ –∑–¥–µ—Å—å –≤–æ–æ–±—â–µ –≤—Å–µ –ø—Ä–æ—Ç–µ—Å—Ç–µ–Ω–æ:
    db.new_order(message.chat.id, time_for_bd, list_order_for_bd)

    # –ì—Ä–µ–±–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã. –ö—É–¥–∞ –±—ã –µ–µ –∑–∞—Å—É–Ω—É—Ç—å –ø–æ–≥–ª—É–±–∂–µ?

    user_order_dict.pop(message.chat.id)
    print(user_order_dict)

    bot.send_message(message.chat.id,
                     "–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ id –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –º–∞–∫—Å –±–ª—é–¥–∞ + 30 –º–∏–Ω—É—Ç.")
    # bot.send_message(message.chat.id, "–î–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ –∑–∞–∫–∞–∑? –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ì–î–ï?")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    schedule_message(bot, message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!"
                                           "–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: https://www.instagram.com", delay)

    # db.order_is_delivered(db.my_orders(message.chat.id)[0][0])


def track_time(chat_id):
    if chat_id in order_schedule_times:
        remaining_time = order_schedule_times[chat_id] - time.time()
        if remaining_time > 0:
            minutes, seconds = divmod(remaining_time, 60)
            bot.send_message(chat_id,
                             f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {int(minutes)} –º–∏–Ω—É—Ç –∏ {int(seconds)} —Å–µ–∫—É–Ω–¥.")
        else:
            bot.send_message(chat_id, "–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    else:
        bot.send_message(chat_id, "–í—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


def query_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)
    # print(call.data)
    flag = call.data[0]
    data = call.data[1:]
    if flag == "m":
        order_id = int(data)  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ order_id –∏–∑ callback_data
        # print(order_id, type(order_id))
        bot.send_message(call.message.chat.id, f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑ ‚¨áÔ∏è: {order_id}")

        data_dishes_hist = db.dishes_data(order_id)
        data_my_client_hist = db.get_client_data(call.message.chat.id)
        # data_dishes_hist = db.orders_history(call.message.chat.id)
        # print(data_dishes_hist)

        data_user = f'{data_my_client_hist[2]}\n{data_my_client_hist[3]}\n{data_my_client_hist[4]}\n{data_my_client_hist[5]}'
        bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ:")
        bot.send_message(call.message.chat.id, data_user)

        bot.send_message(call.message.chat.id, f"–°–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏ –æ–±—â–∞—è —Å—É–º–º–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ ‚¨áÔ∏è: {order_id}")
        res_sum = 0
        res_dish_hist = ''
        for dish in data_dishes_hist:
            res_dish_hist += f'{dish[1]}\n'
            res_sum += dish[2] * dish[3]
        bot.send_message(call.message.chat.id, res_dish_hist)
        bot.send_message(call.message.chat.id, f"{str(res_sum)} —Ä—É–±.")
    elif flag == "<" or flag == ">":
        page = int(data)
        data_history = db.orders_history(call.message.chat.id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î
        if not data_history:
            bot.edit_message_text("–ò—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", call.message.chat.id, call.message.message_id)
            return
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∑–∞–∫–∞–∑–æ–≤ ‚¨áÔ∏è", call.message.chat.id, call.message.message_id,
                              reply_markup=generate_markup(page, data_history))

    elif flag == "<" or flag == ">":
        page = int(data)
        data_history = db.orders_history(call.message.chat.id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î
        if not data_history:
            bot.edit_message_text("–ò—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", call.message.chat.id, call.message.message_id)
            return
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∑–∞–∫–∞–∑–æ–≤ ‚¨áÔ∏è", call.message.chat.id, call.message.message_id,
                              reply_markup=generate_markup(page, data_history))


    elif flag == "h":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã Help
        bot.send_message(call.message.chat.id,
                         "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É –∏–ª–∏ –∫–æ–º—É-—Ç–æ —Ç–∞–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +375296333111."
                         "–ü–æ–∑–≤–æ–Ω–∏ –º–Ω–µ, –ø–æ–∑–≤–æ–Ω–∏!")

    elif flag == "o":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        data_my_order = db.my_orders(call.message.chat.id)
        print(data_my_order)
        data_my_client = db.get_client_data(call.message.chat.id)
        # data_my_order = db.my_orders('nfj4j3nj4')  # –¢–µ—Å—Ç

        db.order_is_delivered(db.my_orders(call.message.chat.id)[0][0])

        """–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑-–¥–µ–ª–∏–≤–µ—Ä–∏–¥?"""
        if data_my_order[0][2] == 0:
            bot.send_message(call.message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")

        elif data_my_order[0][2] == 1:
            bot.send_message(call.message.chat.id, "–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "
                                                   "https://www.instagram.com")

    elif flag == "t":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å?
        track_time(call.message.chat.id)
        # bot.send_message(call.message.chat.id,
        #                  "–ñ–¥–µ–º —à–µ–¥—É–ª–µ—Ä–∞? –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å - —ç—Ç–æ –Ω–µ –ø—Ä–µ–¥–µ–ª...?")
        bot.send_message(call.message.chat.id,
                         "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å - —ç—Ç–æ –Ω–µ –ø—Ä–µ–¥–µ–ª...?")

    """–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è basket?"""
    if call.data == 'change':
        markupUB = InlineKeyboardMarkup(row_width=4)
        for ind_but, dish_but in enumerate(user_order_dict[call.message.chat.id]):
            # for ind_but, dish_but in enumerate(my_dict_orders["user_tg_chat_id"]):
            res_upd_dish_bask = f'{dish_but[1]} - {dish_but[2]}'
            button_1 = InlineKeyboardButton('üóë', callback_data=f'delete_{dish_but[0]}')
            button_2 = InlineKeyboardButton('-', callback_data=f'decrease_{dish_but[0]}')
            button_3 = InlineKeyboardButton(res_upd_dish_bask, callback_data=f'info_{dish_but[0]}')
            button_4 = InlineKeyboardButton('+', callback_data=f'increase_{dish_but[0]}')
            markupUB.add(button_1, button_2, button_3, button_4)

        # button_check = InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', callback_data='check')
        # markupUB.add(button_check)

        bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –±–ª—é–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ ü•∞:", reply_markup=markupUB)

    elif call.data == 'continue':
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        if db.is_registered(call.message.chat.id):
            # if db.is_registered('3fdf5g544'):
            """–≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ?"""
            """–≤–∑—è—Ç—å –∏—Ö –∏–∑ –ë–î? –í—ã–≤–µ–ª–∏"""

            data_my_client = db.get_client_data(call.message.chat.id)
            # data_my_client = db.get_client_data('3fdf5g544')
            # data_my_order = db.my_orders('3fdf5g544')
            data_dishes_my_order = db.dishes_data(1)

            data_user = f'{data_my_client[2]}\n{data_my_client[3]}\n{data_my_client[4]}\n{data_my_client[5]}'
            markupPb = InlineKeyboardMarkup(row_width=1)
            button_1 = InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm')
            markupPb.add(button_1)

            bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ")
            bot.send_message(call.message.chat.id, data_user)

            """—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥ c —Ü–µ–Ω–æ–π –∏ –æ–±—â–µ–π —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
            res_sum_bask = 0
            res_dish_bask = ''
            for dish_bask in user_order_dict[call.message.chat.id]:
                # for dish_bask in my_dict_orders["user_tg_chat_id"]:
                res_dish_bask += f'{dish_bask[1]}\n'
                res_sum_bask += dish_bask[2] * dish_bask[3]

            bot.send_message(call.message.chat.id,
                             f"–°–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏ –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:\n{res_dish_bask}{res_sum_bask} —Ä—É–±.",
                             reply_markup=markupPb)

        """—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    elif call.data.startswith('delete_'):
        dish_id = int(call.data.split('_')[1])
        user_order_dict[call.message.chat.id] = [dish for dish in user_order_dict[call.message.chat.id] if
                                                 dish[0] != dish_id]
        # my_dict_orders["user_tg_chat_id"] = [dish for dish in my_dict_orders["user_tg_chat_id"] if dish[0] != dish_id]
        bot.send_message(call.message.chat.id, "–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
        # print(my_dict_orders["user_tg_chat_id"])
        send_basket(call.message.chat.id)

        """—Ñ—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª-–≤–∞ –±–ª—é–¥ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    elif call.data.startswith('decrease_'):
        dish_id = int(call.data.split('_')[1])
        for i, dish in enumerate(user_order_dict[call.message.chat.id]):
            # for i, dish in enumerate(my_dict_orders["user_tg_chat_id"]):
            if dish[0] == dish_id:
                if dish[2] > 1:
                    dish_list = list(dish)
                    dish_list[2] -= 1
                    user_order_dict[call.message.chat.id][i] = tuple(dish_list)
                    # my_dict_orders["user_tg_chat_id"][i] = tuple(dish_list)
                else:
                    user_order_dict[call.message.chat.id].pop(i)
                    # my_dict_orders["user_tg_chat_id"].pop(i)
                break
        bot.send_message(call.message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥–∞ —É–º–µ–Ω—å—à–µ–Ω–æ.")
        send_basket(call.message.chat.id)

        """—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª-–≤–∞ –±–ª—é–¥ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    elif call.data.startswith('increase_'):
        dish_id = int(call.data.split('_')[1])
        for i, dish in enumerate(user_order_dict[call.message.chat.id]):
            # for i, dish in enumerate(my_dict_orders["user_tg_chat_id"]):
            if dish[0] == dish_id:
                dish_list = list(dish)
                dish_list[2] += 1
                user_order_dict[call.message.chat.id][i] = tuple(dish_list)
                # my_dict_orders["user_tg_chat_id"][i] = tuple(dish_list)
                break
        bot.send_message(call.message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ.")
        # print(my_dict_orders["user_tg_chat_id"])
        send_basket(call.message.chat.id)

        """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ check –≤ query_handler –≤—ã–∑—ã–≤–∞–µ—Ç send_basket, –æ–±–Ω–æ–≤–ª—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    elif call.data == 'check':
        send_basket(call.message.chat.id)

    elif call.data == 'confirm':
        confirm_order(call.message)

    elif call.data == 'track_time':
        track_time(call.message.chat.id)


print("Ready")

if __name__ == "__main__":
    start_scheduler_thread()


    @bot.message_handler(content_types=['text'])
    def message_handler(message):
        # start(message)
        try:
            start(message)
        except Exception as e:
            logging.error(f"Error in message_handler: {e}")


    @bot.callback_query_handler(func=lambda call: True)
    def callback_handler(call):
        # query_handler(call)
        try:
            query_handler(call)
        except Exception as e:
            logging.error(f"Error in callback_handler: {e}")


    # while True:
    #     try:
    #         bot.infinity_polling(timeout=10, long_polling_timeout=5)
    #     except Exception as e:
    #         logging.error(f"Infinity polling exception: {e}")
    #         time.sleep(15)

    bot.infinity_polling()
