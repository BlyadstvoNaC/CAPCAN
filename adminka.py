import telebot
from telebot import types
#from My.Bot_Token import token
from DBfunctions import DB
import requests

bot = telebot.TeleBot('7073410632:AAGKQTCNrJvlJxZIHJHlr6k08TEt5sDRW0c')
db = DB()
#SUPER_ADMIN_CHAT_ID = "7039255546"

admins = {}

dish_data = {}

def is_admin(user_id):
    result = db.execute_select_sql('SELECT is_admin FROM Users WHERE tg_chat_id=?', (user_id,))
    if result:
        is_admin = result[0][0]
        return is_admin is not None and is_admin == 0
    return False

def is_super_admin(user_id):
    result = db.execute_select_sql('SELECT is_admin FROM Users WHERE tg_chat_id=?', (user_id,))
    if result:
        is_admin = result[0][0]
        return is_admin is not None and is_admin == 1
    return False

def is_admin_or_super_admin(user_id):
    return is_admin(user_id) or is_super_admin(user_id)



@bot.message_handler(commands=['add_admin'])
def add_admin(message):
    if not is_super_admin(message.from_user.id):
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –°—É–ø–µ—Ä –ê–¥–º–∏–Ω.')
        return
    try:
        _, tg_chat_id, name, tel, email, adress = message.text.split()
        db.insert('Users', [tg_chat_id, name, tel, email, adress, 0])
        bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_admin tg_chat_id name tel email adress")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['change_admin'])
def change_admin(message):
    if not is_super_admin(message.from_user.id):
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –°—É–ø–µ—Ä –ê–¥–º–∏–Ω.')
        return
    try:
        _, tg_chat_id, new_name = message.text.split()
        if db.is_registered(tg_chat_id):
            old_name = db.get_client_data(tg_chat_id)[1]
            db.update('Users', 'name', new_name, tg_chat_id)
            bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {old_name} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_name}.")
        else:
            bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /change_admin tg_chat_id new_name")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['get_user_id'])
def get_user_id(message):
    try:
        _, username = message.text.split()
        chat_id = message.chat.id
        user = db.get_user_id_by_name(username)
        if user:
            user_id = user[0]
            bot.send_message(chat_id, f"User ID for {username} is {user_id}")
        else:
            bot.send_message(chat_id, f"User {username} not found")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /get_user_id username")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

def get_admins(chat_id):
    admins = db.get_admins()
    if admins:
        admin_list = [f"{admin[0]}: {admin[1]}" for admin in admins]
        admin_message = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:\n" + "\n".join(admin_list)
    else:
        admin_message = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç."
    bot.send_message(chat_id, admin_message)



@bot.message_handler(commands=['add_dish'])
def add_dish_command(message):
    if not is_admin_or_super_admin(message.from_user.id):
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')
        return
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:')
    bot.register_next_step_handler(message, get_dish_name)

def get_dish_name(message):
    dish_data[message.chat.id] = {}
    dish_data[message.chat.id]['name'] = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:')
    bot.register_next_step_handler(message, get_dish_category)

def get_dish_category(message):
    dish_data[message.chat.id]['category'] = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞:')
    bot.register_next_step_handler(message, get_dish_price)

def get_dish_price(message):
    try:
        dish_data[message.chat.id]['price'] = float(message.text)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –±–ª—é–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS):')
        bot.register_next_step_handler(message, get_dish_cooking_time)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
        bot.register_next_step_handler(message, get_dish_price)

def get_dish_cooking_time(message):
    dish_data[message.chat.id]['cooking_time'] = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞:')
    bot.register_next_step_handler(message, get_dish_img)

def get_dish_img(message):
    dish_data[message.chat.id]['img'] = message.text
    dish_data[message.chat.id]['is_on_stop'] = 0

    try:
        db.execute_select_sql('INSERT INTO Dishes (name, category, price, cooking_time, img, is_on_stop) VALUES (?, ?, ?, ?, ?, ?)',
                       (dish_data[message.chat.id]['name'], dish_data[message.chat.id]['category'], dish_data[message.chat.id]['price'],
                        dish_data[message.chat.id]['cooking_time'], dish_data[message.chat.id]['img'], dish_data[message.chat.id]['is_on_stop']))
        bot.send_message(message.chat.id, '–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.')
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞: {e}")
    finally:
        dish_data.pop(message.chat.id, None)

@bot.message_handler(commands=['get_dishes'])
def get_dishes_command(message):
    if not is_admin_or_super_admin(message.from_user.id):
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')
        return
    get_dishes(message)


def get_dishes(message):
    try:
        dishes = db.execute_select_sql('SELECT name, category, price, cooking_time, img FROM Dishes')
        if dishes:
            response = "–°–ø–∏—Å–æ–∫ –±–ª—é–¥:\n"
            for dish in dishes:
                dish_info = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {dish[0]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {dish[1]}\n–¶–µ–Ω–∞: {dish[2]}\n–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {dish[3]}\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dish[4]}\n\n"
                if len(response) + len(dish_info) > 4096:
                    bot.send_message(message.chat.id, response)
                    response = ""
                response += dish_info
            if response:
                bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥: {e}")



def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–°—É–ø–µ—Ä –ê–¥–º–∏–Ω')
    btn2 = types.KeyboardButton('–ë–ª—é–¥–∞')
    btn3 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ')
    btn4 = types.KeyboardButton('–ó–∞–∫–∞–∑—ã')
    btn5 = types.KeyboardButton('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')
    btn6 = types.KeyboardButton('–ü–æ–º–æ—â—å')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ U Mirika!", reply_markup=get_main_menu())
    if is_admin_or_super_admin(message.from_user.id):
        bot.send_message(message.chat.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.', reply_markup=get_main_menu())


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', reply_markup=get_main_menu())

    elif message.text == '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω':
        if is_super_admin(message.from_user.id):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn7 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
            btn8 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
            markup.add(btn7, btn8)
            bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, –°—É–ø–µ—Ä –ê–¥–º–∏–Ω, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å',
                             reply_markup=markup)
            get_admins(message.chat.id)
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –°—É–ø–µ—Ä –ê–¥–º–∏–Ω.')

    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞':
        if is_super_admin(message.from_user.id):
            bot.send_message(message.chat.id,
                             '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_admin tg_chat_id name tel email adress –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –°—É–ø–µ—Ä –ê–¥–º–∏–Ω.')

    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞':
        if is_super_admin(message.from_user.id):
            bot.send_message(message.chat.id,
                             '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /change_admin user_id new_username –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –°—É–ø–µ—Ä –ê–¥–º–∏–Ω.')

    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ':
        if is_admin_or_super_admin(message.from_user.id):
            add_dish_command(message)
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')

    elif message.text == '–ë–ª—é–¥–∞':
        if is_admin_or_super_admin(message.from_user.id):
            get_dishes_command(message)
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')

    else:
        pass


# def dish_category(message):
#     category = message.text
#     if category in ['–°–∞–ª–∞—Ç—ã', '–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞', '–ì–æ—Ä—è—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞', '–ó–∞–∫—É—Å–∫–∏']:
#         bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: ")
#         bot.register_next_step_handler(message, save_dish)
#     else:
#         bot.send_message('–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')

        # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # bot.send_message(message.from_user.id, )



if __name__ == "__main__":
    print('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞')
    bot.infinity_polling(none_stop=True)